**Framework**
-Spring IOC(DI)
-AOP(Aspect Oriented Programming)
-MyBatis Framework(영속성 계층 프레임워크)
-SpringMVC
-SpringBoot
-SpringSecurity
---------------------------------------------------------------------
주요 개념 정리
-높은 응집도(cohesion)와 낮은 결합도(coupling)
"모듈 간의 결합도는 최소화하고 모듈 내 요소들 간의 응집도를 최대화"
응집도: 자신의 역할에 집중하는 정도, 모듈 내 기능 수행을 위해 요소 간에 얼마만큼의 연관된 채ㅐㄱ임이
집중되어 있는 지를 나타내는 정도
결합도: 모듈 간의 상호 의존 정보
참고) 모듈화: 소프트웨어를 각 기능별로 분할하여 설계 및 구현하는 기법

-	객체지향(Object-Oriented)
시스템을 분석, 설계하는 기법
객체를 독립적인 기본 단위로 채택하고 객체와 객체의 관계를 중심으로 분석, 설계하는 기법
객체지향의 주요 개념: Encapsulation, Inheritance, Polymorphism
객체와 클래스와의 관계: 클래스는 설계도, 객체는 건물(붕어빵 틀과 붕어빵)

- Class: Object의 설계도
- Package: 클래스들을 분류
- Library: 재사용 가능한 프로그램들의 모음
- Component: 프로그램들이 실행될 때 하나의 독립적 기능단위를 이루어 부품화 될 때 컴포넌트라고 한다.
- API: Application Programming Interface 응용프로그램을 개발하기 위해 제공하는 인터페이스

- Framework: 사전적인 의미 → 틀, 뼈대, 기반(infrastructure)

- Spring Framework:	java 어플리케이션의 설계, 구현, 테스트, 운영(유지보수) 전반에 대한 기반을 제공
					높은 생산성과 유지보수성 향상을 위해 다양한 인프라를 지원한다.
					(infra: 다양한 라이브러리 및 디자인 패턴을 지원)
					프레임워크는 반완전한 어플리케이션이다.
					개발자는 비즈니스 로직에 집중하도록 기반을 제공하는 것이 프레임워크의 목적이다.
					IOC(DI), AOP, MVC, Security 등을 지원하고
					MyBatis, JUnit과 같은 오픈소스 라이브러리와의 통합을 지원한다.
					
**Spring IOC**
IOC: Inversion Of Control 제어의 역행, 제어의 반전, 역제어
	→	결합도를 낮추어 유지보수성을 향상시킨다.
	
	→	의존 대상을 필요로 할 때, 기존 제어 방식.
		즉 생성하는 것이 아니라
		IOC 컨테이너로부터 의존 대상을 확보하는 방식으로 시스템을 구축하는 것을 말한다.
	효과
		→ 낮은 결합도와 높은 응집도에 기여
		구체적으로 표현하면 결합도가 낮아진다는 표현은 의존 대상 변경시 기존 제어방식은
		객체 생성 및 확보 부분의 소스코드 수정이 불가피하나
		IOC 적용시에는 상위 인터페이스 타입으로 관리되고
		IOC 컨테이너에 의해 객체가 확보되므로
		기존 소스코드 수정을 최소화하여 관리할 수 있다.
		
		응집도가 높아진다는 표현은
		의존 대상 객체의 생성 및 확보 부분은 IOC 컨테이너에 위임하므로
		자신의 비즈니스에 집중할 수 있다.
		
		
Maven(메이븐)으로 Dependency Management:

의존성 관리: 어플리케이션이 필요한 많은 라이브러리를 일괄적으로 관리
pom.xml 에서 설정한다.					